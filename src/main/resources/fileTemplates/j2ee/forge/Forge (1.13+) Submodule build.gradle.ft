buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
    #if (${MIXINS})
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
    #end
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    #if (${MIXINS})
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    #end
    }
}

apply plugin: 'net.minecraftforge.gradle'
#if (${MIXINS})
apply plugin: 'org.spongepowered.mixin'
#end

java {
    archivesBaseName = '${ARTIFACT_ID}'
    toolchain.languageVersion = JavaLanguageVersion.of(${JAVA_VERSION})
}

minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
#if(${MCP_CHANNEL} == "stable" || ${MCP_CHANNEL} == "snapshot")
    mappings channel: '${MCP_CHANNEL}', version: '${MCP_VERSION}-${MCP_MC_VERSION}'
#else
    mappings channel: '${MCP_CHANNEL}', version: '${MCP_VERSION}'
#end

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/removed as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            #if (${GAME_TEST_FRAMEWORK})
            property 'forge.enabledGameTestNamespaces', '${ARTIFACT_ID}'
            #end

            mods {
                ${MOD_NAME} {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/removed as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            #if (${GAME_TEST_FRAMEWORK})
            property 'forge.enabledGameTestNamespaces', '${ARTIFACT_ID}'
            #end

            mods {
                ${MOD_NAME} {
                    source sourceSets.main
                }
            }
        }
#if (${GAME_TEST_FRAMEWORK})

        gameTestServer {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', '${ARTIFACT_ID}'

            mods {
                ${MOD_NAME} {
                    source sourceSets.main
                }
            }
        }
#end
#if (${HAS_DATA})

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/removed as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', '${MOD_NAME}', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                ${MOD_NAME} {
                    source sourceSets.main
                }
            }
        }
#end
    }
}
#if (${MIXINS})

mixin {
    add sourceSets.main, "${ARTIFACT_ID}.refmap.json"

    config "${ARTIFACT_ID}.mixins.json"
}
#end

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }
}

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:${FORGE_VERSION}'

    api project(":${COMMON_PROJECT_NAME}")

    // Real mod deobf dependency examples - these get remapped to your current mappings
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency

    // Examples using mod jars from ./libs
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
#if (${MIXINS})

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
#end
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title": "${MOD_NAME}",
            #if (${AUTHOR_LIST})
                "Specification-Vendor": "${AUTHOR_LIST}",
            #else
                //"Specification-Vendor": "${MOD_NAME} authors",
            #end
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": project.jar.archiveVersion,
            #if (${AUTHOR_LIST})
                "Implementation-Vendor": "${AUTHOR_LIST}",
            #else
                //"Implementation-Vendor": "${MOD_NAME} authors",
            #end
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    options.release = ${JAVA_VERSION}
}

jar.finalizedBy('reobfJar')
